enum Rol {
  Administrador
  Lider
  Estudiante
}

enum Estado {
  Pendiente
  Autorizado
  No_Autorizado
}
enum EstadoProyecto {
  Inactivo
  Activo
}

enum Faseproyecto {
  Iniciado
  En
  Desarrollo
  Terminado
  Null
}

enum EstadoInscripcion {
  Aceptada
  Rechazada
  Pendiente
}

enum Level {
  Principiante
  Intermedio
  Avanzado
}

type Usuarios {
  _id: ID!
  identificacion: String!
  nombreCompleto: String!
  correo: String!
  contrasena: String!
  rol: String!
  estado: String!
}

type Proyectos {
  _id: ID!
  idProyecto: String!
  nombreProyecto: String!
  objetivosGenerales: String!
  objetivosEspecificos: String!
  presupuesto: String
  fechaInicio: String
  fechaTerminacion: String
  identificacionLider: String
  nombreLider: String
  estado: String!
  faseProyecto: String
}

type InscripcionProyectos {
  _id: ID!
  idProyecto: String
  identificacionEstudiante: String
  estado: String
  fechaIngreso: String
  fechaEgreso: String
}

type Avances {
  _id: ID!
  idProyecto: String
  fechaAvance: String!
  descripcion: String
  observaciones: String
}

type Query {
  "Devuelve todos los Usuarios"
  getUsuarios: [Usuarios]
  "Devuelve un Usuario por ID"
  getUsuarioId(_id: String!): Usuarios
  "Devuelve un Usuario por su CÃ©dula"
  getUsuarioByCedula(identificacion: String!): Usuarios
  "Valida las credenciales del usuario para el ingreso"
  getLogin(correo: String!, contrasena: String!): Usuarios

  "Devuelve Todos los Proyectos"
  getProyectos: [Proyectos]
  "Devuelve un Proyecto por ID"
  getProyectoId(_id: String!): Proyectos

  "Devuelve Todas las Inscripciones"
  getInscripciones: [InscripcionProyectos]
  "Devuelve una Inscripcion por ID"
  getInscripcionId(_id: String!): InscripcionProyectos

  "Devuelve Todos los Avances"
  getAvances: [Avances]
  "Devuelve un Avance por ID"
  getAvanceId(_id: String!): Avances
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: String
}

input UsuariosInput {
  identificacion: String!
  nombreCompleto: String!
  correo: String!
  contrasena: String!
  rol: String!
  estado: String!
}

input ProyectosInput {
  idProyecto: String!
  nombreProyecto: String!
  objetivosGenerales: String!
  objetivosEspecificos: String!
  presupuesto: String
  fechaInicio: String
  fechaTerminacion: String
  identificacionLider: String
  nombreLider: String
  estado: String!
  faseProyecto: String
}

input AvancesInput {
  idProyecto: String
  fechaAvance: String!
  descripcion: String
  observaciones: String
}

input InscripcionInput {
  idProyecto: String
  identificacionEstudiante: String
  estado: String
  fechaIngreso: String
  fechaEgreso: String
}

type Mutation {
  "Crea un usuario"
  createUsuario(input: UsuariosInput!): Usuarios
  "Actualiza un Usuario"
  updateUsuario(_id: String!, input: UsuariosInput): Usuarios
  "Elimina un usuario"
  deleteUsuario(_id: String!): Boolean

  "Crea un Proyecto"
  createProyecto(input: ProyectosInput!): Proyectos
  "Actualiza un Proyecto"
  updateProyecto(_id: String!, input: ProyectosInput): Proyectos
  "Elimina un Proyecto"
  deleteProyecto(_id: String!): Boolean

  "Crea un Avance"
  createAvance(input: AvancesInput!): Avances
  "Actualiza un Avance"
  updateAvance(_id: String!, input: AvancesInput): Avances
  "Elimina un Avance"
  deleteAvance(_id: String!): Boolean

  "Crea una Inscripcion"
  createInscripcion(input: InscripcionInput!): InscripcionProyectos
  "Actualiza una Inscripcion"
  updateInscripcion(_id: String!, input: InscripcionInput): InscripcionProyectos
  "Elimina una Inscripcion"
  deleteInscripcion(_id: String!): Boolean
}
